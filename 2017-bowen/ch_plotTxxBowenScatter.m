load lat;
load lon;
load waterGrid;
waterGrid = logical(waterGrid);

showOutliers = true;
plotModels = false;
useSeasonalAmp = false;
useTxxSeasonalAmp = false;
useMrsos = false;
useHfss = false;
useHfls = false;
useEF = false;
usePr = false;
warmSeason = true;

scatterPlots = true;
globalCorrMap = false;

% load TNn amplification map
if useSeasonalAmp
    % generated by seasonalAnomalies
    load e:/data/projects/bowen/derived-chg/seasonal-amp.mat;
    load e:/data/projects/bowen/derived-chg/txxAmp.mat;
    ampVar = seasonalAmp;
elseif useTxxSeasonalAmp
    load e:/data/projects/bowen/derived-chg/seasonal-amp.mat;
    load e:/data/projects/bowen/derived-chg/txxAmp.mat;
    ampVar = amp-seasonalAmp;
else
    load e:/data/projects/bowen/derived-chg/txxAmp.mat;
    ampVar = amp;
end

% load snow change map
if useMrsos
    load e:/data/projects/bowen/derived-chg/mrsos-chg-all;
    driverVar = mrsosChg;
elseif useHfss
    load e:/data/projects/bowen/derived-chg/hfss-chg-all;
    driverVar = hfssChg;
    driverVar(driverVar>1000 | driverVar<-1000) = NaN;
elseif useHfls
    load e:/data/projects/bowen/derived-chg/hfls-chg-all;
    driverVar = hflsChg;
elseif usePr
    load e:/data/projects/bowen/derived-chg/pr-chg-all;
    driverVar = prChg;
elseif useEF
    load 2017-bowen/ef-chg;
    driverVar = efChg;
else
    load e:/data/projects/bowen/derived-chg/bowen-chg;
    driverVar = bowenChg;
    driverVar(driverVar > 1000) = NaN;
    driverVar(driverVar < -100) = NaN;
    driverVar(isinf(driverVar)) = NaN;
end

models = {'access1-0', 'access1-3', 'bcc-csm1-1-m', 'bnu-esm', 'canesm2', ...
              'ccsm4', 'cesm1-bgc', 'cesm1-cam5', 'cmcc-cm', 'cmcc-cms', 'cnrm-cm5', 'csiro-mk3-6-0', ...
              'fgoals-g2', 'gfdl-esm2g', 'gfdl-esm2m', 'hadgem2-cc', ...
              'hadgem2-es', 'inmcm4', 'miroc5', 'miroc-esm', ...
              'mpi-esm-mr', 'mri-cgcm3', 'noresm1-m'};

regionNames = {'World', ...
                'Eastern U.S.', ...
                'Southeast U.S.', ...
                'Central Europe', ...
                'Mediterranean', ...
                'Northern SA', ...
                'Amazon', ...
                'Central Africa', ...
                'North Africa'};
regionAb = {'world', ...
            'us-east', ...
            'us-se', ...
            'europe', ...
            'med', ...
            'sa-n', ...
            'amazon', ...
            'africa-cent', ...
            'n-africa'};
            
regions = [[[-90 90], [0 360]]; ...             % world
           [[30 42], [-91 -75] + 360]; ...     % eastern us
           [[30 41], [-95 -75] + 360]; ...      % southeast us
           [[45, 55], [10, 35]]; ...            % Europe
           [[36 45], [-5+360, 40]]; ...        % Med
           [[5 20], [-90 -45]+360]; ...         % Northern SA
           [[-10, 1], [-75, -53]+360]; ...      % Amazon
           [[-10 10], [15, 30]]; ...            % central africa
           [[15 30], [-4 29]]];                 % north africa

if plotModels
    modelLeg = {};
    figure('Color', [1,1,1]);
    hold on;
    axis off;
    for m = 1:length(models)
        plot(0, 0, 'k');
        modelLeg{m} = [num2str(m) ' ' models{m}];
    end
    set(gca, 'FontSize', 20);
    legend(modelLeg)
    export_fig model-list.eps;
end

seasons = [[12 1 2];
           [3 4 5];
           [6 7 8];
           [9 10 11]];

% load hottest seasons for each grid cell
load('2017-bowen/hottest-season-ncep.mat');

if scatterPlots
    % loop over regions
    for region = 4
        % select lat lon coords for region
        [latInds, lonInds] = latLonIndexRange({lat, lon, []}, regions(region, [1 2]), regions(region, [3 4]));

        % select amp for region for all models
        regionAmp = squeeze(nanmean(nanmean(ampVar(latInds, lonInds, :))));

        
        % select months for driver var
        if warmSeason
            hotSeason = mode(reshape(hottestSeason(latInds, lonInds), [length(latInds)*length(lonInds),1]));
            driverMonths = seasons(hotSeason,:);
        else
            driverMonths = 1:12;
        end
        
        % and driver
        regionDriverChg = squeeze(nanmean(nanmean(nanmean(driverVar(latInds, lonInds, :, driverMonths), 4), 2), 1));

        nn = find(~isnan(regionDriverChg) & ~isnan(regionAmp));
        regionAmp = regionAmp(nn);
        regionDriverChg = regionDriverChg(nn);

        if showOutliers
            ampOutlierStdMult = 2;
            driverOutlierStdMult = 2;

            driverOutliers = find(regionDriverChg > nanstd(regionDriverChg)*driverOutlierStdMult+nanmean(regionDriverChg) | ...
                                 regionDriverChg < -nanstd(regionDriverChg)*driverOutlierStdMult+nanmean(regionDriverChg));
            ampOutliers = find(regionAmp > nanstd(regionAmp)*ampOutlierStdMult+nanmean(regionAmp) | ...
                               regionAmp < -nanstd(regionAmp)*ampOutlierStdMult+nanmean(regionAmp));

            outliers = union(driverOutliers, ampOutliers);
            regionDriverChgNoOutliers = regionDriverChg;
            regionDriverChgNoOutliers(outliers) = [];
            regionAmpNoOutliers = regionAmp;
            regionAmpNoOutliers(outliers) = [];
        end

        figure('Color', [1,1,1]);
        hold on;
        box on;
        axis square;
        grid on;

        % loop over all models
        for m = 1:length(regionAmp)
            %plot(regionTxx(m), regionBowenChg(m), 'o', 'MarkerSize', 2 + abs(20*regionBowenTxCorr(m)), 'LineWidth', 2);
            if showOutliers && length(find(ampOutliers == m)) > 0
                t = text(regionDriverChg(m), regionAmp(m), num2str(m), 'HorizontalAlignment', 'center', 'Color', 'r');
            elseif showOutliers && length(find(driverOutliers == m)) > 0
                t = text(regionDriverChg(m), regionAmp(m), num2str(m), 'HorizontalAlignment', 'center', 'Color', [67, 186, 86]./255.0);
            elseif showOutliers && length(find(driverOutliers == m)) > 0 && length(find(ampOutliers == m)) > 0
                t = text(regionDriverChg(m), regionAmp(m), num2str(m), 'HorizontalAlignment', 'center', 'Color', 'm');
            else
                t = text(regionDriverChg(m), regionAmp(m), num2str(m), 'HorizontalAlignment', 'center', 'Color', 'k');
            end
            t.FontSize = 18;
        end

        if showOutliers
            f = fit(regionDriverChgNoOutliers, regionAmpNoOutliers, 'poly1');
            pNoOutliers = plot([min(regionDriverChgNoOutliers) max(regionDriverChgNoOutliers)], [f(min(regionDriverChgNoOutliers)) f(max(regionDriverChgNoOutliers))], '--b', 'LineWidth', 2);
            cNoOutliers = confint(f);
            sigOutliers = 'Not sig';
            if sign(cNoOutliers(1,1)) == sign(cNoOutliers(2,1))
                sigOutliers = 'Sig';
            end
        end

        f = fit(regionDriverChg, regionAmp, 'poly1');
        pAll = plot([min(regionDriverChg) max(regionDriverChg)], [f(min(regionDriverChg)) f(max(regionDriverChg))], '--', 'Color', [.6 .6 .6], 'LineWidth', 2);
        cAll = confint(f);
        sigAll = 'Not sig';
        if sign(cAll(1,1)) == sign(cAll(2,1))
            sigAll = 'Sig';
        end

        warmStr = 'Warm season';
        if ~warmSeason
            warmStr = 'All season';
        end
        
        set(gca, 'FontSize', 40);
        if useHfss
            xlabel([warmStr ' hfss change (%)']);
        elseif useHfls
            xlabel([warmStr ' hfls change (%)']);
        elseif useMrsos
            xlabel([warmStr ' mrsos change (%)']);
        elseif useEF
            xlabel('EF change (%)');
        elseif usePr
            xlabel([warmStr ' pr change (%)']);
        else
            xlabel('Bowen ratio change (%)');
        end
        if useHfls || useHfss
            xlim([-50 125]);
            set(gca, 'XTick', [-50 -25 0 25 50 75 100 125]);
        elseif useEF
            xlim([-100 100]);
            set(gca, 'XTick', [-100 -75 -50 -25 0 25 50 75 100]);
        elseif useMrsos || usePr
            xlim([-75 25]);
            set(gca, 'XTick', -75:25:25);
        else
            if region == 7
                xlim([-50 300]);
                set(gca, 'XTick', [-50 0 50 100 200 300]);
            else
                xlim([-100 100]);
                set(gca, 'XTick', [-100 -75 -50 -25 0 25 50 75 100]);
            end
        end

        if useSeasonalAmp
            ylabel(['Seasonal Tx amplification (' char(176) ')']);
        elseif useTxxSeasonalAmp
            ylabel(['TXx - seasonal Tx change (' char(176) ')']);
        else
            ylabel(['TXx amplification (' char(176) ')']);
        end

        ylim([-2 5.5]);
        set(gca, 'YTick', -2:5.5);
        title([regionNames{region}]);
        legend([pAll pNoOutliers], {['All: (' sigAll ')'], ['No outliers: (' sigOutliers ')']});
        set(gcf, 'Position', get(0,'Screensize'));

        
        tempVar = 'txx';
        if useSeasonalAmp
            tempVar = 'tx-seasonal';
        elseif useTxxSeasonalAmp
            tempVar = 'txx-seasonal-diff';
        end

        compVar = 'bowen';
        if useMrsos
            compVar = 'mrsos';
        elseif useHfss
            compVar = 'hfss';
        elseif useHfls
            compVar = 'hfls';
        elseif useEF
            compVar = 'ef';
        end

        warmStr = 'warm-';
        if ~warmSeason
            warmStr = 'all-';
        end
        
        export_fig([tempVar '-amp-' compVar '-scatter-' warmStr num2str(region) '.eps']);
        close all;
    end
end

if globalCorrMap
    
    corrMap = [];
    corrSig = [];
    
    for xlat = 1:size(lat, 1)
        for ylon = 1:size(lat, 2)
            if waterGrid(xlat, ylon)
                corrMap(xlat, ylon) = NaN;
                corrSig(xlat, ylon) = 0;
                continue;
            end
            
            % select txx/bowen for region for all models
            regionAmp = squeeze(ampVar(xlat, ylon, :));

            % and bowen
            regionDriverChg = squeeze(driverVar(xlat, ylon, :));

            nn = find(~isnan(regionDriverChg) & ~isnan(regionAmp));
            regionAmp = regionAmp(nn);
            regionDriverChg = regionDriverChg(nn);

            if length(nn) < 10
                corrMap(xlat, ylon) = NaN;
                corrSig(xlat, ylon) = 0;
                continue;
            end
            
            if showOutliers
                ampOutlierStdMult = 2;
                driverOutlierStdMult = 2;

                driverOutliers = find(regionDriverChg > nanstd(regionDriverChg)*driverOutlierStdMult+nanmean(regionDriverChg) | ...
                                     regionDriverChg < -nanstd(regionDriverChg)*driverOutlierStdMult+nanmean(regionDriverChg));
                ampOutliers = find(regionAmp > nanstd(regionAmp)*ampOutlierStdMult+nanmean(regionAmp) | ...
                                   regionAmp < -nanstd(regionAmp)*ampOutlierStdMult+nanmean(regionAmp));

                outliers = union(driverOutliers, ampOutliers);
                regionDriverChgNoOutliers = regionDriverChg;
                regionDriverChgNoOutliers(outliers) = [];
                regionAmpNoOutliers = regionAmp;
                regionAmpNoOutliers(outliers) = [];
            end
            
            if showOutliers
                f = fit(regionAmpNoOutliers, regionDriverChgNoOutliers, 'poly1');
                c = confint(f);
            else
                f = fit(regionAmp, regionDriverChg, 'poly1');
                c = confint(f);
                
            end
            corrMap(xlat, ylon) = f.p1;
            corrSig(xlat, ylon) = sign(c(1,1)) == sign(c(2,1));
            
%             if showOutliers
%                 corrMap(xlat, ylon) = corr(regionTxxNoOutliers, regionBowenChgNoOutliers);
%             else
%                 corrMap(xlat, ylon) = corr(regionTxx, regionBowenChg);
%             end
        end
    end
    
    corrSig(1:15,:) = 0;
    corrSig(75:90,:) = 0;
    
    result = {lat, lon, corrMap};

    
    tempVar = 'txx';
    if useSeasonalAmp
        tempVar = 'tx-seasonal';
    end

    
    if useHfss
        title = ['TXx chg - hfss chg corr'];
        file = [tempVar '-hfss-chg-corr.eps'];
    elseif useHfls
        title = ['TXx chg - hfls chg corr'];
        file = [tempVar '-hfls-chg-corr.eps'];
    else
        title = ['TXx chg - Bowen chg corr'];
        file = [tempVar '-bowen-chg-corr.eps'];
    end
    
%     sigChg = txxAmp < 0.5;
%     sigChg(1:15,:) = 0;
%     sigChg(80:90,:) = 0;
    
    saveData = struct('data', {result}, ...
                      'plotRegion', 'world', ...
                      'plotRange', [-20 20], ...
                      'cbXTicks', -20:5:20, ...
                      'plotTitle', title, ...
                      'fileTitle', file, ...
                      'plotXUnits', ['Slope'], ...
                      'blockWater', true, ...
                      'statData', corrSig, ...
                      'stippleInterval', 5, ...
                      'colormap', brewermap([], '*RdBu'), ...
                      'boxCoords', {regions([2,4,7], :)});
    plotFromDataFile(saveData);
end